{"id":3583,"date":"2018-10-14T19:40:26","date_gmt":"2018-10-14T19:40:26","guid":{"rendered":"https:\/\/specter.solutions\/?p=3583"},"modified":"2021-10-19T09:52:54","modified_gmt":"2021-10-19T09:52:54","slug":"ecdsa-is-not-that-bad-two-party-signing-without-schnorr-or-bls","status":"publish","type":"post","link":"https:\/\/specter.solutions\/ecdsa-is-not-that-bad-two-party-signing-without-schnorr-or-bls\/","title":{"rendered":"ECDSA is not that bad: two-party signing without Schnorr or BLS"},"content":{"rendered":"\t\t<div data-elementor-type=\"wp-post\" data-elementor-id=\"3583\" class=\"elementor elementor-3583\">\n\t\t\t\t\t\t<div class=\"elementor-inner\">\n\t\t\t\t<div class=\"elementor-section-wrap\">\n\t\t\t\t\t\t\t\t\t<section class=\"elementor-section elementor-top-section elementor-element elementor-element-ea6e40b elementor-section-boxed elementor-section-height-default elementor-section-height-default\" data-id=\"ea6e40b\" data-element_type=\"section\">\n\t\t\t\t\t\t<div class=\"elementor-container elementor-column-gap-default\">\n\t\t\t\t\t\t\t<div class=\"elementor-row\">\n\t\t\t\t\t<div class=\"elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-ae9203c\" data-id=\"ae9203c\" data-element_type=\"column\">\n\t\t\t<div class=\"elementor-column-wrap elementor-element-populated\">\n\t\t\t\t\t\t\t<div class=\"elementor-widget-wrap\">\n\t\t\t\t\t\t<div class=\"elementor-element elementor-element-6744e86 elementor-widget elementor-widget-text-editor\" data-id=\"6744e86\" data-element_type=\"widget\" data-widget_type=\"text-editor.default\">\n\t\t\t\t<div class=\"elementor-widget-container\">\n\t\t\t\t\t\t\t\t<div class=\"elementor-text-editor elementor-clearfix\">\n\t\t\t\t<p data-selectable-paragraph=\"\">I already wrote about <a href=\"https:\/\/medium.com\/@snigirev.stepan\/how-schnorr-signatures-may-improve-bitcoin-91655bcb4744\" target=\"_blank\" rel=\"noopener\">Schnorr<\/a> and <a href=\"https:\/\/medium.com\/@snigirev.stepan\/bls-signatures-better-than-schnorr-5a7fe30ea716\" target=\"_blank\" rel=\"noopener\">BLS<\/a> signatures and I think they are really great. One of the most exciting properties of these signature schemes is <em>key aggregation<\/em> \u2014 if we want to make a 2-of-2 multisignature address we just take our public keys and add them together. The signature will be also just a sum of two signatures. This is possible because both Schnorr and BLS are linear \u2014 the sum of the verification equations is also a valid equation.<\/p><p data-selectable-paragraph=\"\">For example, to verify Schnorr signature <strong><em>(R, s) = (k\u00d7G, k+hash(P,R,m)\u22c5pk) <\/em><\/strong>we need to confirm that <strong><em>s\u00d7G = R + hash(P,R,m)\u00d7P<\/em><\/strong>. This means that if we use two private keys <strong><em>pk1, pk2 <\/em><\/strong>with corresponding public keys <strong><em>P1=pk1\u00d7G<\/em><\/strong>, <strong><em>P2=pk2\u00d7G<\/em><\/strong> we can add them up to get a multisig key <strong><em>P = P1+P2<\/em><\/strong>. And to generate a multisignature we just add our random numbers and signatures: <strong><em>(R, s) = (R1+R2, s1+s2)<\/em><\/strong>. We only need to agree on <strong><em>R=R1+R2<\/em><\/strong> in advance as it is used in the hash of the message. If the equations above look confusing to you, check out my <a href=\"https:\/\/medium.com\/@snigirev.stepan\/how-schnorr-signatures-may-improve-bitcoin-91655bcb4744\" target=\"_blank\" rel=\"noopener\">previous post on Schnorr signatures<\/a>.<\/p><p data-selectable-paragraph=\"\">With <a href=\"https:\/\/en.wikipedia.org\/wiki\/Elliptic_Curve_Digital_Signature_Algorithm\" target=\"_blank\" rel=\"noopener nofollow\">ECDSA<\/a> everything is a bit more complicated. The verification equation is not linear. To generate a signature we need to choose a random number <strong><em>k<\/em><\/strong> with corresponding point <strong><em>R = k\u00d7G<\/em><\/strong> and compute <strong><em>s = (z+r\u22c5pk)\/k<\/em><\/strong>. Here <strong><em>z=hash(m) <\/em><\/strong>is the hash of the message we are signing and <strong><em>r<\/em><\/strong> is an <strong><em>x-<\/em><\/strong>coordiante of our random point <strong><em>R<\/em><\/strong>. Annoying part here is this division by <strong><em>k<\/em><\/strong>. A simple addition of the equations doesn\u2019t work anymore. But multiplication does! We just need to be careful with it. There is a nice trick shown in the <a href=\"https:\/\/eprint.iacr.org\/2017\/552.pdf\" target=\"_blank\" rel=\"noopener nofollow\">paper<\/a> by Yehuda Lindell that allows us to do 2-party ECDSA and generate a common signature.<\/p><h3 data-selectable-paragraph=\"\">\u00a0<\/h3><h3 data-selectable-paragraph=\"\"><b>2-party ECDSA at a glance<\/b><\/h3><p data-selectable-paragraph=\"\">To make key aggregation work with ECDSA we need to use multiplication instead of addition. From two private keys <strong><em>pk1, pk2<\/em><\/strong> and corresponding public keys <strong><em>P1=pk1\u00d7G<\/em><\/strong>, <strong><em>P2=pk2\u00d7G<\/em><\/strong> we calculate an aggregated public key <strong><em>P=pk1\u00d7P2=pk2\u00d7P1=pk1\u22c5pk2\u00d7G<\/em><\/strong>. This is a standard <a href=\"https:\/\/en.wikipedia.org\/wiki\/Diffie%E2%80%93Hellman_key_exchange\" target=\"_blank\" rel=\"noopener nofollow\">Diffie-Helman key exchange<\/a> \u2014 every party takes the public key of another party and multiplies it by his private key. Now both parties know the common public key without exposing anything about their private keys.<\/p><p data-selectable-paragraph=\"\">To generate a valid signature for the message <strong><em>m<\/em><\/strong> with hash <strong><em>z=hash(m)<\/em><\/strong> we need to generate two random numbers <strong><em>k1, k2 <\/em><\/strong>(one for every party) and then calculate somehow the signature <strong><em>(r, s)<\/em><\/strong>. Calculating <strong><em>r<\/em><\/strong> is easy \u2014 we do the same Diffie-Helman key exchange. Parties send each other their random points <strong><em>R1=k1\u00d7G<\/em><\/strong>,<strong><em> R2=k2\u00d7G<\/em><\/strong> and calculate common point <strong><em>R=k1\u00d7R2=k2\u00d7R1=k1\u22c5k2\u00d7G<\/em><\/strong>. The part with <strong><em>s<\/em><\/strong> is much more complicated \u2014 we need to compute <strong><em>s=(z+r\u22c5pk1\u22c5pk2)\/k1\/k2<\/em><\/strong> in such a way that private key and random number of one party stay unknown to another.<\/p><p data-selectable-paragraph=\"\">For this purpose, we can use <a href=\"https:\/\/en.wikipedia.org\/wiki\/Homomorphic_encryption\" target=\"_blank\" rel=\"noopener nofollow\">homomorphic encryption<\/a>, in particular, <a href=\"https:\/\/en.wikipedia.org\/wiki\/Paillier_cryptosystem\" target=\"_blank\" rel=\"noopener nofollow\">Paillier scheme<\/a>. Homomorphic encryption is a wonderful tool \u2014 with it, we can do computations on the encrypted data without getting any knowledge of the data itself. I will explain how it works a bit later and for now try to imagine: we can send an encrypted secret to another party and he can add something to it, multiply it by some number and then return us the result without getting any information about what he just did. Sounds magical! And it really is. Modern cryptography is so exciting!<\/p><p data-selectable-paragraph=\"\">To calculate our common signature we need to do the following: the first party encrypts his private key <strong><em>pk1<\/em><\/strong> and sends the encrypted value <strong><em>e(pk1)<\/em><\/strong> to another party. The second party, using this encrypted key, creates a partial signature <strong><em>s\u2019=(z+r\u22c5e(pk1)\u22c5pk2)\/k2<\/em><\/strong> and sends it back to the first party. As the private key of the first party is encrypted, the second party learns nothing about it. And as the second party uses both his private key <strong><em>pk2<\/em><\/strong> and his random number <strong><em>k2<\/em><\/strong>, the first party also learns nothing. Now, the first party can decrypt the returned value and divide it by <strong><em>k1<\/em><\/strong>. Finally, we get our signature <strong><em>s=(z+r\u22c5pk1\u22c5pk2)\/k2\/k1<\/em><\/strong>.<\/p>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\t<div class=\"elementor-element elementor-element-2069372 elementor-widget elementor-widget-image\" data-id=\"2069372\" data-element_type=\"widget\" data-widget_type=\"image.default\">\n\t\t\t\t<div class=\"elementor-widget-container\">\n\t\t\t\t\t\t\t\t<div class=\"elementor-image\">\n\t\t\t\t\t\t\t\t\t<figure class=\"wp-caption\">\n\t\t\t\t\t\t\t\t\t\t<img loading=\"lazy\" decoding=\"async\" width=\"895\" height=\"1024\" src=\"https:\/\/specter.solutions\/wp-content\/uploads\/2021\/01\/1-4oJV59a7EMNgiKrbGtWhrA@2x-895x1024.png\" class=\"attachment-large size-large\" alt=\"\" srcset=\"https:\/\/specter.solutions\/wp-content\/uploads\/2021\/01\/1-4oJV59a7EMNgiKrbGtWhrA@2x-895x1024.png 895w, https:\/\/specter.solutions\/wp-content\/uploads\/2021\/01\/1-4oJV59a7EMNgiKrbGtWhrA@2x-262x300.png 262w, https:\/\/specter.solutions\/wp-content\/uploads\/2021\/01\/1-4oJV59a7EMNgiKrbGtWhrA@2x-768x879.png 768w, https:\/\/specter.solutions\/wp-content\/uploads\/2021\/01\/1-4oJV59a7EMNgiKrbGtWhrA@2x-1342x1536.png 1342w, https:\/\/specter.solutions\/wp-content\/uploads\/2021\/01\/1-4oJV59a7EMNgiKrbGtWhrA@2x-600x687.png 600w, https:\/\/specter.solutions\/wp-content\/uploads\/2021\/01\/1-4oJV59a7EMNgiKrbGtWhrA@2x.png 1400w\" sizes=\"(max-width: 895px) 100vw, 895px\" \/>\t\t\t\t\t\t\t\t\t\t\t<figcaption class=\"widget-image-caption wp-caption-text\">Simplified diagram of 2-party ECDSA signing. Blue values are public points, red values are secret, orange text represents homomorphic encryption and decryption.<\/figcaption>\n\t\t\t\t\t\t\t\t\t\t<\/figure>\n\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\t<div class=\"elementor-element elementor-element-fefa590 elementor-widget elementor-widget-text-editor\" data-id=\"fefa590\" data-element_type=\"widget\" data-widget_type=\"text-editor.default\">\n\t\t\t\t<div class=\"elementor-widget-container\">\n\t\t\t\t\t\t\t\t<div class=\"elementor-text-editor elementor-clearfix\">\n\t\t\t\t<p id=\"9b0e\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\">Notice that we need to get an encrypted value of the private key <strong class=\"gm hk\"><em class=\"hj\">e(pk1)<\/em><\/strong><br \/>only once during the setup phase and then we can reuse it for every<br \/>signature in the future. Even more, thanks to the homomorphic properties<br \/>of the encryption scheme we can use <a class=\"ey hi\" href=\"https:\/\/github.com\/bitcoin\/bips\/blob\/master\/bip-0032.mediawiki\" target=\"_blank\" rel=\"noopener nofollow\">HD wallets<\/a><br \/>to generate new encrypted children keys from the encrypted master key.<br \/>To derive a child key we only need to add a certain number to the parent<br \/>private key \u2014 we can easily do it homomorphically with the encrypted<br \/>master key we have.<\/p><p id=\"7748\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\">Unfortunately, this scheme works only for <em class=\"hj\">two parties<\/em>. If we want to use arbitrary m-of-n multisignature with bare ECDSA we still can do it, but it requires a much <a class=\"ey hi\" href=\"https:\/\/eprint.iacr.org\/2016\/013.pdf\" target=\"_blank\" rel=\"noopener nofollow\">more complicated scheme<\/a>.<br \/>And it is 100 times slower. But even with only two parties we can do<br \/>many amazing things \u2014 all Lightning channels can appear as normal<br \/>transactions (pay-to-pubkeyhash), and we can even do <a class=\"ey hi\" href=\"https:\/\/lists.linuxfoundation.org\/pipermail\/lightning-dev\/attachments\/20180426\/fe978423\/attachment-0001.pdf\" target=\"_blank\" rel=\"noopener nofollow\">scriptless scripts with ECDSA<\/a>.<\/p><h3 id=\"3a7a\" class=\"hl hm dn au av hn ho gp hp hq hr gt hs ht hu hv hw hx hy hz ia ib ic id ie if ch\" data-selectable-paragraph=\"\">\u00a0<\/h3><h3 id=\"3a7a\" class=\"hl hm dn au av hn ho gp hp hq hr gt hs ht hu hv hw hx hy hz ia ib ic id ie if ch\" data-selectable-paragraph=\"\"><b>Homomorphic encryption<\/b><\/h3><p id=\"2753\" class=\"gk gl dn gm b gn ig gp gq gr ih gt gu gv ii gx gy gz ij hb hc hd ik hf hg hh dg ch\" data-selectable-paragraph=\"\">So how does this homomorphic magic work? As usual in cryptography, we use huge numbers everywhere. We start by choosing two large prime numbers <strong class=\"gm hk\"><em class=\"hj\">p<\/em><\/strong> and <strong class=\"gm hk\"><em class=\"hj\">q<\/em><\/strong> of the same length (if they have different lengths we need a <a class=\"ey hi\" href=\"https:\/\/en.wikipedia.org\/wiki\/Paillier_cryptosystem\" target=\"_blank\" rel=\"noopener nofollow\">fancier algorithm<\/a>). We will use their product <strong class=\"gm hk\"><em class=\"hj\">n=p\u22c5q<\/em><\/strong> and a number <strong class=\"gm hk\"><em class=\"hj\">g=n+1<\/em><\/strong> for encryption. These two numbers (<strong class=\"gm hk\"><em class=\"hj\">n<\/em><\/strong>, <strong class=\"gm hk\"><em class=\"hj\">g<\/em><\/strong>) are public and can be shared with anyone. Another pair of numbers, <strong class=\"gm hk\"><em class=\"hj\">\u03bb=<\/em><\/strong><a class=\"ey hi\" href=\"https:\/\/en.wikipedia.org\/wiki\/Least_common_multiple\" target=\"_blank\" rel=\"noopener nofollow\"><strong class=\"gm hk\"><em class=\"hj\">lcm<\/em><\/strong><\/a><strong class=\"gm hk\"><em class=\"hj\">(p\u20131, q\u20131)=(p\u20131)\u22c5(q\u20131)\/2<\/em><\/strong> and <strong class=\"gm hk\"><em class=\"hj\">\u00b5=\u03bb^\u20131 mod n <\/em><\/strong>are used for decryption. We need to keep them secret.<\/p><p id=\"8976\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\">This <strong class=\"gm hk\"><em class=\"hj\">\u03bb<\/em><\/strong> number is <a class=\"ey hi\" href=\"https:\/\/en.wikipedia.org\/wiki\/Carmichael_function\" target=\"_blank\" rel=\"noopener nofollow\">pretty interesting<\/a>. If we take <em class=\"hj\">any<\/em> number <strong class=\"gm hk\"><em class=\"hj\">r<\/em><\/strong> and calculate <strong class=\"gm hk\"><em class=\"hj\">r^\u03bb mod n<\/em><\/strong> we\u2019ll get <strong class=\"gm hk\"><em class=\"hj\">1<\/em><\/strong>. If we calculate <strong class=\"gm hk\"><em class=\"hj\">r^(\u03bb\u22c5n) mod n\u00b2<\/em><\/strong> we will also get <strong class=\"gm hk\"><em class=\"hj\">1<\/em><\/strong>. This means we can compute an inverse of a number as <strong class=\"gm hk\"><em class=\"hj\">r^(\u20131)=r^(\u03bb-1) mod n<\/em><\/strong>. It also works for <strong class=\"gm hk\"><em class=\"hj\">\u03bb<\/em><\/strong> itself:<\/p><p id=\"9652\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\"><strong class=\"gm hk\"><em class=\"hj\">\u00b5=\u03bb^\u20131 = \u03bb^(\u03bb\u20131) mod n<\/em><\/strong><\/p><p id=\"6666\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\">Now, to <em class=\"hj\">encrypt<\/em> a secret number <strong class=\"gm hk\"><em class=\"hj\">x<\/em><\/strong> we pick a random number <strong class=\"gm hk\"><em class=\"hj\">r<\/em><\/strong> and compute encrypted value <strong class=\"gm hk\"><em class=\"hj\">e(x) = g^x \u22c5 r^n mod n\u00b2<\/em><\/strong>. All the operations with encrypted data are happening modulo <strong class=\"gm hk\"><em class=\"hj\">n\u00b2<\/em><\/strong>. It is a pretty large number, so homomorphic calculations may be pretty slow and memory consuming. If we want to <em class=\"hj\">add<\/em> a number <strong class=\"gm hk\"><em class=\"hj\">a<\/em><\/strong> to the value <strong class=\"gm hk\"><em class=\"hj\">x<\/em><\/strong> using only encrypted data we just multiply it by <strong class=\"gm hk\"><em class=\"hj\">g^a<\/em><\/strong>:<\/p><p id=\"4702\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\"><strong class=\"gm hk\"><em class=\"hj\">e(x)\u22c5g^a = g^(x+a)\u22c5 r^n mod n\u00b2 = e(x+a)<\/em><\/strong><\/p><p id=\"c8cd\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\">To <em class=\"hj\">multiply<\/em> <strong class=\"gm hk\"><em class=\"hj\">x<\/em><\/strong> by some number <strong class=\"gm hk\"><em class=\"hj\">b<\/em><\/strong> we need to exponentiate the encrypted value:<\/p><p id=\"2ffc\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\"><strong class=\"gm hk\"><em class=\"hj\">e(x)^b=g^(x\u22c5b)\u22c5(r^b)^n mod n\u00b2 = e(x\u22c5b)<\/em><\/strong><\/p><p id=\"900a\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\">The random number changes from <strong class=\"gm hk\"><em class=\"hj\">r<\/em><\/strong> to <strong class=\"gm hk\"><em class=\"hj\">r^b<\/em><\/strong>, but we don\u2019t really care. It\u2019s just a different random number.<\/p><p id=\"8c6d\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\">After we are done with the calculations we can <em class=\"hj\">decrypt<\/em> the data and get the result. To extract <strong class=\"gm hk\"><em class=\"hj\">x <\/em><\/strong>from the cyphertext we do the following:<\/p><p id=\"1036\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\"><strong class=\"gm hk\"><em class=\"hj\">x = (e(x)^\u03bb mod n\u00b2 \u2013 1) \/ n \u22c5 \u00b5 mod n<\/em><\/strong><\/p><p id=\"0dfb\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\">Looks confusing. Let\u2019s take a closer look. First, we take our cyphertext <strong class=\"gm hk\"><em class=\"hj\">e(x)<\/em><\/strong> and exponentiate it to the power of <strong class=\"gm hk\"><em class=\"hj\">\u03bb<\/em><\/strong>:<\/p><p id=\"5181\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\"><strong class=\"gm hk\"><em class=\"hj\">e(x)^\u03bb mod n\u00b2 = g^(x\u22c5\u03bb) \u22c5 r^(n\u22c5\u03bb) mod n\u00b2 = g^(x\u22c5\u03bb) mod n\u00b2<\/em><\/strong><\/p><p id=\"a1fe\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\">Here we used the fact that <strong class=\"gm hk\"><em class=\"hj\">r^(n\u22c5\u03bb) mod n\u00b2 = 1<\/em><\/strong> and <strong class=\"gm hk\"><em class=\"hj\">r<\/em><\/strong> part disappears.<\/p><p id=\"195f\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\">Now, recall that <strong class=\"gm hk\"><em class=\"hj\">g=n+1<\/em><\/strong>. Using <a class=\"ey hi\" href=\"https:\/\/en.wikipedia.org\/wiki\/Binomial_theorem\" target=\"_blank\" rel=\"noopener nofollow\">binomial theorem<\/a> we can expand <strong class=\"gm hk\"><em class=\"hj\">(1+n)^x <\/em><\/strong>and after taking it modulo <strong class=\"gm hk\"><em class=\"hj\">n\u00b2<\/em><\/strong> only first two terms will remain:<\/p><p id=\"8406\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\"><strong class=\"gm hk\"><em class=\"hj\">g^x mod n\u00b2 = (1+n)^x mod n\u00b2 = (1 + x\u22c5n + x\u22c5(x-1)\/2 \u22c5 n\u00b2 + \u2026) mod n\u00b2 = (1+x\u22c5n)<\/em><\/strong><\/p><p id=\"95db\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\">In our case we have:<\/p><p id=\"7df2\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\"><strong class=\"gm hk\"><em class=\"hj\">g^(\u03bb\u22c5x) mod n\u00b2 = (1 + \u03bbx\u22c5n + \u03bbx\u22c5(\u03bbx-1)\/2 \u22c5 n\u00b2 + \u2026) mod n\u00b2 = 1 + \u03bbx\u22c5n<\/em><\/strong><\/p><p id=\"336f\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\">From here we subtract <strong class=\"gm hk\"><em class=\"hj\">1<\/em><\/strong>, divide by <strong class=\"gm hk\"><em class=\"hj\">n<\/em><\/strong>, get rid of the <strong class=\"gm hk\"><em class=\"hj\">\u03bb<\/em><\/strong> (multiplying by the inverse of it \u2014 <strong class=\"gm hk\"><em class=\"hj\">\u00b5<\/em><\/strong>) and end up with pure <strong class=\"gm hk\"><em class=\"hj\">x<\/em><\/strong>.<\/p><p id=\"d746\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\">If you don\u2019t believe in the above \u2014 try it out by yourself. I wrote a tiny <a class=\"ey hi\" href=\"https:\/\/github.com\/stepansnigirev\/2-party-ecdsa-playground\/blob\/master\/paillier.ipynb\" target=\"_blank\" rel=\"noopener nofollow\">jupyter notebook<\/a> just to make sure it works.<\/p><h3 id=\"408d\" class=\"hl hm dn au av hn ho gp hp hq hr gt hs ht hu hv hw hx hy hz ia ib ic id ie if ch\" data-selectable-paragraph=\"\">\u00a0<\/h3><h3 id=\"408d\" class=\"hl hm dn au av hn ho gp hp hq hr gt hs ht hu hv hw hx hy hz ia ib ic id ie if ch\" data-selectable-paragraph=\"\"><b>Further reading<\/b><\/h3><p id=\"ad3b\" class=\"gk gl dn gm b gn ig gp gq gr ih gt gu gv ii gx gy gz ij hb hc hd ik hf hg hh dg ch\" data-selectable-paragraph=\"\">Here we discussed the basic idea of the algorithm, but there are a few things that are left outside of the scope of this post. In particular, the setup phase of the algorithm is a bit more complicated. The second party needs to make sure that the ciphertext he got from the first party corresponds to the public key <strong class=\"gm hk\"><em class=\"hj\">P1<\/em><\/strong>. So the first party needs to prove the connection between the ciphertext <strong class=\"gm hk\"><em class=\"hj\">e(pk1)<\/em><\/strong> and the public point <strong class=\"gm hk\"><em class=\"hj\">P1<\/em><\/strong>. This is quite tricky and computationally heavy and can take <em class=\"hj\">a few seconds<\/em> on the modern computer. But as soon as the setup phase is done, all the signing happens pretty quickly \u2014 all the proofs there are fast.<\/p><p id=\"2275\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\">There are more interesting things in the paper. I strongly recommend reading it if you can. Also, homomorphic encryption is really wonderful and I wrote only the core principle without going into details.<\/p><p id=\"39ac\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh dg ch\" data-selectable-paragraph=\"\">And we didn\u2019t discuss applications of this scheme in details. So check out these papers to find out more:<\/p><ul class=\"\"><li id=\"155e\" class=\"gk gl dn gm b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh jn jo jp ch\" data-selectable-paragraph=\"\"><a class=\"ey hi\" href=\"https:\/\/www.google.de\/search?q=2+party+ecdsa&amp;oq=2+party+ecdsa&amp;aqs=chrome..69i57j69i60l2j69i61j69i59j69i64.4847j0j4&amp;sourceid=chrome&amp;ie=UTF-8\" target=\"_blank\" rel=\"noopener nofollow\">Original paper by Lindell \u2014 Fast Secure Two-party ECDSA Signing<\/a><\/li><li id=\"5222\" class=\"gk gl dn gm b gn jq gp gq gr jr gt gu gv js gx gy gz jt hb hc hd ju hf hg hh jn jo jp ch\" data-selectable-paragraph=\"\"><a class=\"ey hi\" href=\"http:\/\/www.cs.tau.ac.il\/~fiat\/crypt07\/papers\/Pai99pai.pdf\" target=\"_blank\" rel=\"noopener nofollow\">Paillier paper on homomorphic scheme<\/a><\/li><li id=\"3a5d\" class=\"gk gl dn gm b gn jq gp gq gr jr gt gu gv js gx gy gz jt hb hc hd ju hf hg hh jn jo jp ch\" data-selectable-paragraph=\"\"><a class=\"ey hi\" href=\"https:\/\/lists.linuxfoundation.org\/pipermail\/lightning-dev\/attachments\/20180426\/fe978423\/attachment-0001.pdf\" target=\"_blank\" rel=\"noopener nofollow\">Scriptless scripts with ECDSA<\/a><\/li><li id=\"2e6c\" class=\"gk gl dn gm b gn jq gp gq gr jr gt gu gv js gx gy gz jt hb hc hd ju hf hg hh jn jo jp ch\" data-selectable-paragraph=\"\"><a class=\"ey hi\" href=\"https:\/\/eprint.iacr.org\/2018\/472.pdf\" target=\"_blank\" rel=\"noopener nofollow\">Multi-Hop Locks for Secure, Privacy-Preserving and Interoperable Payment-Channel Networks<\/a><\/li><\/ul>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\t\t\t<\/div>\n\t\t\t\t\t<\/div>\n\t\t<\/div>\n\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t<\/div>\n\t\t<\/section>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t\t\t\t<\/div>\n\t\t","protected":false},"excerpt":{"rendered":"<p>I already wrote about Schnorr and BLS signatures and I think they are really great. One of the most exciting properties of these signature schemes is key aggregation \u2014 if we want to make a 2-of-2 multisignature address we just take our public keys and add them together. The signature will be also just a &hellip;<\/p>\n<p class=\"read-more\"> <a class=\"\" href=\"https:\/\/specter.solutions\/ecdsa-is-not-that-bad-two-party-signing-without-schnorr-or-bls\/\"> <span class=\"screen-reader-text\">ECDSA is not that bad: two-party signing without Schnorr or BLS<\/span> Read More &raquo;<\/a><\/p>\n","protected":false},"author":6,"featured_media":3666,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"site-sidebar-layout":"default","site-content-layout":"default","ast-main-header-display":"","ast-hfb-above-header-display":"","ast-hfb-below-header-display":"","ast-hfb-mobile-header-display":"","site-post-title":"","ast-breadcrumbs-content":"","ast-featured-img":"","footer-sml-layout":"","theme-transparent-header-meta":"default","adv-header-id-meta":"","stick-header-meta":"","header-above-stick-meta":"","header-main-stick-meta":"","header-below-stick-meta":"","footnotes":""},"categories":[30,40,39],"tags":[],"_links":{"self":[{"href":"https:\/\/specter.solutions\/wp-json\/wp\/v2\/posts\/3583"}],"collection":[{"href":"https:\/\/specter.solutions\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/specter.solutions\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/specter.solutions\/wp-json\/wp\/v2\/users\/6"}],"replies":[{"embeddable":true,"href":"https:\/\/specter.solutions\/wp-json\/wp\/v2\/comments?post=3583"}],"version-history":[{"count":12,"href":"https:\/\/specter.solutions\/wp-json\/wp\/v2\/posts\/3583\/revisions"}],"predecessor-version":[{"id":3665,"href":"https:\/\/specter.solutions\/wp-json\/wp\/v2\/posts\/3583\/revisions\/3665"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/specter.solutions\/wp-json\/wp\/v2\/media\/3666"}],"wp:attachment":[{"href":"https:\/\/specter.solutions\/wp-json\/wp\/v2\/media?parent=3583"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/specter.solutions\/wp-json\/wp\/v2\/categories?post=3583"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/specter.solutions\/wp-json\/wp\/v2\/tags?post=3583"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}